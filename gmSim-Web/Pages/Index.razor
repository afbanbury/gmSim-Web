@page "/"
@inject HttpClient Http

@if (_game == null || _lastWeekFixtures == null || _nextWeekFixtures == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>Season @_game.Season</h1>

    <div class="container-fluid">
        <div class="row">
            <div class="col-sm">

                <h3>Week @(_game.Week - 1) Results</h3>
                <FixturesForWeek Fixtures="@_lastWeekFixtures.ToList()"/>
            </div>
            <div class="col-sm">
                <h3>Week @(_game.Week) Fixtures</h3>
                <FixturesForWeek  Fixtures ="@_nextWeekFixtures.ToList()"/>
            </div>
        </div>
    </div>
    
    <p><button class="btn btn-primary" @onclick="NextWeek">@ButtonString()</button></p>

}
@code {
    private GameDocument _game;
    private FixturesDocument[] _lastWeekFixtures;
    private FixturesDocument[] _nextWeekFixtures;
    
    protected override async Task OnParametersSetAsync()
    {
        _game = await Http.GetFromJsonAsync<GameDocument>("https://localhost:5001/api/game");
        await UpdateFixtures();
    }

    private string ButtonString()
    {
        switch (_game.NextWeekType)
        {
            case WeekType.EndSeason:
                return "Next season";
            case WeekType.OffSeason:
                return "Next off season week";
            case WeekType.PostSeason:
                return "Next Play-Off game";
            case WeekType.RegularSeason:
                return "Play regular season game";
            default:
                return "Error";
        }
    }
    
    private async Task NextWeek()
    {
        var result = await Http.PostAsync("https://localhost:5001/api/game/nextWeek", null);
        _game = await Http.GetFromJsonAsync<GameDocument>("https://localhost:5001/api/game");
        await UpdateFixtures();   
    }
    
    private async Task UpdateFixtures()
    {
        _lastWeekFixtures = await Http.GetFromJsonAsync<FixturesDocument[]>("https://localhost:5001/api/fixtures/ForWeek/" + _game.Season + "/" + (_game.Week - 1));
        _nextWeekFixtures = await Http.GetFromJsonAsync<FixturesDocument[]>("https://localhost:5001/api/fixtures/ForWeek/" + _game.Season + "/" + _game.Week);
    }
    
}

